# CSC254Project2


---------------------------------------------------------
Completed by: Junfei Liu (jliu137) & Pinxin Liu (pliu23)
---------------------------------------------------------

Hi grader,

--------------------- How to run ---------------------------------

Compilation and run instructions are:
You need to go the CSC254_project3 directory and type make in commandline for compilation.
After that, you can run the program by typing the following command:
ocamlc -o test_ecl str.cma ecl_test.ml
then a executable binary file named test_ecl will be generated. You can run it by typing:
./test_ecl < [input file] > [output file]
where input file is the file containing extended calculator language code and the output file
will contain generated Pidgin C code. You can compile the genrated Pidgin C code by typing:
gcc -o [executable] [generated C file]
where the generated C file is Pidgin C code and output file is the generated executable.
You can then run the C program by typing:
./[executable]

For example, you can generate the C code for primes-generating program by following:
Create primes.ecl file containing the primes-generating program in extended calculator language
ocamlc -o test_ecl str.cma ecl_test.ml
./test_ecl < primes.ecl > primes.c
Then you can compile and run primes.c by typing:
gcc -o primes primes.c
./primes

We provide the following sample test files:
primes.ecl --- contains the primes_prog
gcd.ecl --- contains the gcd_prog
sum.ecl --- contains the sum_ave_prog
sqrt.ecl --- contains the sqrt_prog
and the following custom test files:
parallel_scope.ecl --- contains several parallel scope in addition to nested scope
long_binop.ecl --- contains complicated binops in a line


To run the test files, you can use the following commands:
./test_ecl < primes.ecl > primes_test.c
./test_ecl < gcd.ecl > gcd_test.c
./test_ecl < sum.ecl > sum_test.c
./test_ecl < sqrt.ecl > sqrt_test.c
./test_ecl < parallel_scope.ecl > parallel_scope_test.c
./test_ecl < long_binop.ecl > long_binop_test.c


--------------------- work we have done ------------------------------

### 1. Translate the parse tree into a syntax tree
You can check ASTs generated through the ocaml interpreter. By typing
ocaml
in the command line, you can enter the ocaml interpreter. Then type
#use "ecl_test.ml";;
Now you can see the ASTs generated for test cases.

### 2. Translate the AST into an equivalent program in C
You can check the pidgin c programs generated by instructions in How to run section above.

### Extra credits



